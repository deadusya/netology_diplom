"""
–ò—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ VK, –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ—Ä–≤–∏—Å –Ω–∞–º–Ω–æ–≥–æ –ª—É—á—à–µ, —á–µ–º Tinder, –∞ –∏–º–µ–Ω–Ω–æ: —á–∞—Ç-–±–æ—Ç–∞ "VKinder". –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∏—Å–∫–∞—Ç—å –ª—é–¥–µ–π, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ —É—Å–ª–æ–≤–∏—è, –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ VK:
    - –≤–æ–∑—Ä–∞—Å—Ç,
    - –ø–æ–ª,
    - –≥–æ—Ä–æ–¥,
    - —Å–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ.

–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –µ–≥–æ id –≤ –í–ö, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã –∏—â–µ–º –ø–∞—Ä—É.

–ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–æ—Å–∏—Ç—å –µ—ë —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    - –ö–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç PEP8.
    - –ü–æ–ª—É—á–∞—Ç—å —Ç–æ–∫–µ–Ω –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω—É–∂–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏.
    - –ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —Ñ—É–Ω–∫—Ü–∏–∏/–∫–ª–∞—Å—Å—ã/–º–æ–¥—É–ª–∏/–ø–∞–∫–µ—Ç—ã.
    - –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤ –ë–î.
    - –õ—é–¥–∏ –Ω–µ –¥–æ–ª–∂–Ω—ã –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –ø–æ–∏—Å–∫–µ.
    - –ù–µ –∑–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è vk.
"""
import logging
from typing import Any, Dict

import vk_api
from vk_api.longpoll import VkLongPoll, VkEventType, Event
from vk_api.utils import get_random_id

from db import Db
from vkapi import VkApi
from utils import ParseError, make_parse_city, parse_age, parse_sex

logger = logging.getLogger(__name__)

greet_msg = '–ü—Ä–∏–≤–µ—Ç, {name}! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –ø–∞—Ä—É, –Ω–∞–ø–∏—à–∏ "–ø–æ–∏—Å–∫" –≤ —á–∞—Ç!'
help_msg = (
    "–Ø –ø–æ–Ω–∏–º–∞—é —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    "–ø—Ä–∏–≤–µ—Ç - –æ—Ç–≤–µ—á—É –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º\n"
    "–ø–æ–∏—Å–∫ - –Ω–∞—á–Ω—É –∏—Å–∫–∞—Ç—å –¥–ª—è —Ç–µ–±—è –ø–∞—Ä—É"
)
age_msg = "–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç"
city_msg = "–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –∂–∏–≤–µ—à—å?"
sex_msg = "–ß—É—Ç—å –Ω–µ –∑–∞–±—ã–ª!üòÑ –ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–≤–æ–π –ø–æ–ª (–º/–∂)"


class VkinderBot:
    def __init__(self, token: str, api: VkApi, db: Db):
        self.state: Dict[int, Any] = {}
        self.api = api
        self.db = db
        self.vk = vk_api.VkApi(token=token)

    def run_pooling(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        self.longpoll = VkLongPoll(self.vk)
        for event in self.longpoll.listen():
            if event.type == VkEventType.MESSAGE_NEW:
                if event.to_me:
                    if self.state.get(event.user_id) is None:
                        self.state[event.user_id] = None
                    try:
                        self.handle_message(event)
                    except:
                        self.write_msg(event.user_id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫")
                        logger.exception("–ü—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    def handle_message(self, event: Event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        state = self.state[event.user_id]
        message = event.text

        # state –Ω—É–∂–µ–Ω —á—Ç–æ–±—ã –æ—Ç–ª–∏—á–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –æ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,
        # –∫–æ—Ç–æ—Ä—ã–µ –º—ã —É –Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∏–ª–∏
        if state == "age":
            self.process_age(event)
        elif state == "sex":
            self.process_sex(event)
        elif state == "city":
            self.process_city(event)
        elif message == "–ø—Ä–∏–≤–µ—Ç":
            self.process_greeting(event)
        elif message == "–ø–æ–∏—Å–∫":
            self.process_search(event)
        else:
            self.show_help(event)

    def get_user(self, user_id):
        user = self.db.find_user(user_id)
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –≤–∫
        # –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        if user is None:
            user = self.api.get_user(user_id)
            user = self.db.create_user(user)
        return user

    def process_search(self, event: Event):
        user_id = event.user_id
        user = self.get_user(user_id)
        # –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–∞–∫–∏—Ö-—Ç–æ –¥–∞–Ω–Ω—ã—Ö, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Ö –∏
        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ state –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º
        # —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏—Ö —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
        if user.get("age") is None:
            self.write_msg(user_id, age_msg)
            self.state[user_id] = "age"
            return

        if user.get("city") is None:
            self.write_msg(user_id, city_msg)
            self.state[user_id] = "city"
            return

        if user.get("sex") is None:
            self.write_msg(user_id, sex_msg)
            self.state[user_id] = "sex"
            return

        self.search_friends(user_id)

    def show_help(self, event: Event):
        self.write_msg(event.user_id, help_msg)

    def search_friends(self, user_id):
        offer = self.api.search_new_friend(user_id)
        attachment = ",".join(
            map(lambda p: f'{"photo"}{offer["id"]}_{p["id"]}', offer["photos"])
        )
        link = f'https://vk.com/id{offer["id"]}'
        name = f'{offer.get("first_name")}'
        text = f"{name}\n{link}\n\n"
        self.write_msg(user_id, text=text, attachment=attachment)

    def process_greeting(self, event: Event):
        name = self.api.get_user(event.user_id)["first_name"]
        self.write_msg(event.user_id, greet_msg.format(name=name))

    def process_age(self, event: Event):
        user_id = event.user_id
        user = self.db.find_user(user_id)
        try:
            user["age"] = parse_age(event.text)
            self.db.update_user(user)
            self.state[user_id] = None
            self.process_search(event)
        except ParseError as e:
            self.write_msg(user_id, e)

    def process_sex(self, event: Event):
        user_id = event.user_id
        user = self.db.find_user(user_id)
        try:
            user["sex"] = parse_sex(event.text)
            self.db.update_user(user)
            self.state[user_id] = None
            self.process_search(event)
        except ParseError as e:
            self.write_msg(user_id, e)

    def process_city(self, event: Event):
        parse_city = make_parse_city(self.api)

        user_id = event.user_id
        user = self.db.find_user(user_id)
        try:
            user["city"] = parse_city(event.text)
            self.db.update_user(user)
            self.state[user_id] = None
            self.process_search(event)
        except ParseError as e:
            self.write_msg(user_id, e)

    def process_help(self, event: Event):
        self.write_msg(event.user_id, "process_help")

    def write_msg(self, user_id, text=None, attachment=None, keyboard=None):
        values = {
            "user_id": user_id,
            "random_id": get_random_id(),
        }

        if text:
            values["message"] = text

        if attachment:
            values["attachment"] = attachment

        if keyboard:
            values["keyboard"] = keyboard

        self.vk.method("messages.send", values)
